__author__ = 'decarlin'

import logging
from numpy import genfromtxt, dot
import math
from scipy.sparse import coo_matrix
from scipy.sparse.linalg import expm

class Diffuser:

    def __init__(self, networkN, time=0.1, normalize=True):
        logging.info('Diffuser: Initializing')
        #TODO: Process networkN
        self.network = networkN
        self.time_T = time
        self.input_vector=node_attr('DiffuseThisColumn',normalize=self.normalize)
        logging.info('Diffuser: Initialization complete')

    def start(self):
        """Diffuses the selected nodes against the network"""
        logging.info('Diffuser: Starting diffusion')
        #TODO: Perform diffusion
        calculateKernel(self.network.laplacian_matrix)
        self.out_vector=dot(self.input_vector,self.kernel)
        node_dict={self.network.nodes[i]:self.out_vector[i,0] for i in xrange(length(self.network.nodes)}
        logging.info('Diffuser: Calculating kernel')
        set_node_attribute(self.network,'DiffusedOutput',self.out_vector)
        logging.info('Diffuser: Diffusion completed')
        return self.network

    def calulateKernel(self,L):
        self.kernel = expm(-self.time_T*L)
